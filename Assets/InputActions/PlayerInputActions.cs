//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""ef8c1b02-6e66-4f3e-9ee1-f86280a4ea76"",
            ""actions"": [
                {
                    ""name"": ""ToggleMinimap"",
                    ""type"": ""Button"",
                    ""id"": ""2c3c5b0c-5be2-41d8-88a0-a1b0016ea3d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopMoving"",
                    ""type"": ""Button"",
                    ""id"": ""6c7abf7e-1bd2-4d84-be4a-bc9dadebf340"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""moveFasterMoveAlongPath"",
                    ""type"": ""Button"",
                    ""id"": ""90c97d3b-415b-470d-abc7-083abc892532"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""moveSlowerMoveAlongPath"",
                    ""type"": ""Button"",
                    ""id"": ""fb5101a5-3e84-4640-8cdf-aae7692d9afc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleRecording"",
                    ""type"": ""Button"",
                    ""id"": ""5cce8cb0-9fc3-4bd6-af32-4d3185f09dc1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a925bbe5-2968-4138-8e93-87d93f5d1a2b"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleMinimap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edec3265-213a-4479-b220-93718ab958f9"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopMoving"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfb05e01-3deb-4115-a940-b1301154416c"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveFasterMoveAlongPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0aa7207-dee1-4d58-a534-f15bec8163d7"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""moveSlowerMoveAlongPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b19ecb2-4985-4849-bdb0-9ae135a1e2f8"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_ToggleMinimap = m_Gameplay.FindAction("ToggleMinimap", throwIfNotFound: true);
        m_Gameplay_StopMoving = m_Gameplay.FindAction("StopMoving", throwIfNotFound: true);
        m_Gameplay_moveFasterMoveAlongPath = m_Gameplay.FindAction("moveFasterMoveAlongPath", throwIfNotFound: true);
        m_Gameplay_moveSlowerMoveAlongPath = m_Gameplay.FindAction("moveSlowerMoveAlongPath", throwIfNotFound: true);
        m_Gameplay_ToggleRecording = m_Gameplay.FindAction("ToggleRecording", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Gameplay.enabled, "This will cause a leak and performance issues, PlayerInputActions.Gameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_ToggleMinimap;
    private readonly InputAction m_Gameplay_StopMoving;
    private readonly InputAction m_Gameplay_moveFasterMoveAlongPath;
    private readonly InputAction m_Gameplay_moveSlowerMoveAlongPath;
    private readonly InputAction m_Gameplay_ToggleRecording;
    public struct GameplayActions
    {
        private @PlayerInputActions m_Wrapper;
        public GameplayActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleMinimap => m_Wrapper.m_Gameplay_ToggleMinimap;
        public InputAction @StopMoving => m_Wrapper.m_Gameplay_StopMoving;
        public InputAction @moveFasterMoveAlongPath => m_Wrapper.m_Gameplay_moveFasterMoveAlongPath;
        public InputAction @moveSlowerMoveAlongPath => m_Wrapper.m_Gameplay_moveSlowerMoveAlongPath;
        public InputAction @ToggleRecording => m_Wrapper.m_Gameplay_ToggleRecording;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @ToggleMinimap.started += instance.OnToggleMinimap;
            @ToggleMinimap.performed += instance.OnToggleMinimap;
            @ToggleMinimap.canceled += instance.OnToggleMinimap;
            @StopMoving.started += instance.OnStopMoving;
            @StopMoving.performed += instance.OnStopMoving;
            @StopMoving.canceled += instance.OnStopMoving;
            @moveFasterMoveAlongPath.started += instance.OnMoveFasterMoveAlongPath;
            @moveFasterMoveAlongPath.performed += instance.OnMoveFasterMoveAlongPath;
            @moveFasterMoveAlongPath.canceled += instance.OnMoveFasterMoveAlongPath;
            @moveSlowerMoveAlongPath.started += instance.OnMoveSlowerMoveAlongPath;
            @moveSlowerMoveAlongPath.performed += instance.OnMoveSlowerMoveAlongPath;
            @moveSlowerMoveAlongPath.canceled += instance.OnMoveSlowerMoveAlongPath;
            @ToggleRecording.started += instance.OnToggleRecording;
            @ToggleRecording.performed += instance.OnToggleRecording;
            @ToggleRecording.canceled += instance.OnToggleRecording;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @ToggleMinimap.started -= instance.OnToggleMinimap;
            @ToggleMinimap.performed -= instance.OnToggleMinimap;
            @ToggleMinimap.canceled -= instance.OnToggleMinimap;
            @StopMoving.started -= instance.OnStopMoving;
            @StopMoving.performed -= instance.OnStopMoving;
            @StopMoving.canceled -= instance.OnStopMoving;
            @moveFasterMoveAlongPath.started -= instance.OnMoveFasterMoveAlongPath;
            @moveFasterMoveAlongPath.performed -= instance.OnMoveFasterMoveAlongPath;
            @moveFasterMoveAlongPath.canceled -= instance.OnMoveFasterMoveAlongPath;
            @moveSlowerMoveAlongPath.started -= instance.OnMoveSlowerMoveAlongPath;
            @moveSlowerMoveAlongPath.performed -= instance.OnMoveSlowerMoveAlongPath;
            @moveSlowerMoveAlongPath.canceled -= instance.OnMoveSlowerMoveAlongPath;
            @ToggleRecording.started -= instance.OnToggleRecording;
            @ToggleRecording.performed -= instance.OnToggleRecording;
            @ToggleRecording.canceled -= instance.OnToggleRecording;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnToggleMinimap(InputAction.CallbackContext context);
        void OnStopMoving(InputAction.CallbackContext context);
        void OnMoveFasterMoveAlongPath(InputAction.CallbackContext context);
        void OnMoveSlowerMoveAlongPath(InputAction.CallbackContext context);
        void OnToggleRecording(InputAction.CallbackContext context);
    }
}
